pipeline {
    agent any

    environment {
        registryCredential = 'dockerhub'
        DOCKER_REGISTRY = 'yeshwanth2435' 
        DOCKER_IMAGE="app-image"
        DEV_REPO = "${DOCKER_REGISTRY}/dev"
        PROD_REPO = "${DOCKER_REGISTRY}/prod"
        EC2_INSTANCE_IP = "172.31.40.178" 
        SSH_KEY_PATH = "/var/lib/jenkins/id_rsa"
    }

    stages {
        stage('Build and Push to Dev Repo') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    sh "chmod +x build/build.sh"
                    sh "build/build.sh $DEV_REPO"
                    docker.withRegistry( '', registryCredential ) {
                        sh "chmod +x build/deploy.sh"
                        sh "docker push ${DEV_REPO}"
                    }
                }
            }
        }

        stage('Build and Push to Prod Repo') {
            when {
                branch 'master'
            }
            steps {
                script {
                    sh "chmod +x build/build.sh"
                    sh "build/build.sh ${PROD_REPO}"
                    docker.withRegistry( '', registryCredential ) {
                        sh "chmod +x build/deploy.sh"
                        sh "docker push ${PROD_REPO}"
                    }
                }
            }
        }

        stage('Deploy to EC2 Instance') {
            when {
                branch 'master'
            }
            steps {
                script {
					docker.withRegistry( '', registryCredential ) {
                        // Pull the latest Docker image
                        sh "docker pull ${PROD_REPO}"
                        sh "docker save ${PROD_REPO} -o image.tar"  // Save the Docker image to a tar file
                    }
                    // Transfer the image tar file to the EC2 instance
                    sh """
                    scp -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} image.tar ${EC2_INSTANCE_IP}:~/image.tar
                    """
                    // SSH into the EC2 instance and deploy the Docker container
                    sh """
                    ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ${EC2_INSTANCE_IP} << 'EOF'

                    # Load the Docker image from the tar file...........
                    docker load -i ~/image.tar

                    # Removing the container, if it exits
                    docker ps -q --filter "name=app-image" | xargs -r docker stop
                    docker ps -aq --filter "name=app-image" | xargs -r docker rm
                    
                    # Running the container
                    docker run -d -p 80:80 --name ${DOCKER_IMAGE} ${PROD_REPO}
                    EOF
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images
            sh "docker rmi ${DEV_REPO} || true"
            sh "docker rmi ${PROD_REPO} || true"
        }
    }
}